{"version":3,"sources":["hooks.ts","slices/gameSlice.ts","icons.ts","slices/gridSlice.ts","slices/timerSlice.ts","components/Card.tsx","components/Game.tsx","components/PairTimer.tsx","components/TotalTimer.tsx","components/Interface.tsx","components/StartScreen.tsx","App.tsx","store.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","started","done","leaderboard","JSON","parse","localStorage","getItem","stringify","player","gameSlice","createSlice","name","reducers","startGame","state","finishGame","action","push","time","payload","sort","a","b","setItem","setPlayer","clearLeaderboard","actions","icons","gridSlice","grid","pair","foundPairs","populateGrid","icons1","Math","random","icons2","r","rowArray","c","col","card1","icon","pop","position","row","visibility","card2","toggleVisibility","closePair","cart","clearPair","clearFoundPairs","turnAllCards","forEach","card","timerSlice","pairTimer","timer","totalTimer","pairTimerTick","pairTimerStart","pairTimerStop","totalTimerTick","totalTimerStart","totalTimerStop","Card","dispatch","onClick","length","className","Game","useEffect","setTimeout","map","rowIndex","cardIndex","PairTimer","setInterval","clearInterval","TotalTimer","Interface","StartScreen","game","type","value","onChange","e","currentTarget","item","index","App","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAIaA,EAAiB,kBAAMC,eACvBC,EAAkDC,I,OCFzDC,EAA0B,CAC/BC,SAAS,EACTC,MAAM,EACNC,YAAaC,KAAKC,MACjBC,aAAaC,QAAQ,gBAAkBH,KAAKI,UAAU,KAEvDC,OAAQL,KAAKC,MACZC,aAAaC,QAAQ,WAAaH,KAAKI,UAAU,YAItCE,EAAYC,YAAY,CACpCC,KAAM,OACNZ,eACAa,SAAU,CACTC,UAAW,SAAAC,GACVA,EAAMd,SAAU,GAGjBe,WAAY,SAACD,EAAOE,GACnBF,EAAMd,SAAU,EAChBc,EAAMZ,YAAYe,KAAK,CAAET,OAAQM,EAAMN,OAAQU,KAAMF,EAAOG,UAC5DL,EAAMZ,YAAYkB,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,KAAOI,EAAEJ,QAC5Cb,aAAakB,QAAQ,cAAepB,KAAKI,UAAUO,EAAMZ,eAG1DsB,UAAW,SAACV,EAAOE,GAClBF,EAAMN,OAASQ,EAAOG,QACtBd,aAAakB,QAAQ,SAAUpB,KAAKI,UAAUS,EAAOG,WAGtDM,iBAAkB,SAAAX,GACjBA,EAAMZ,YAAc,GACpBG,aAAakB,QAAQ,cAAepB,KAAKI,UAAUO,EAAMZ,kBAKrD,EACNO,EAAUiB,QADIb,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,WAAYS,EAA/B,EAA+BA,UAAWC,EAA1C,EAA0CA,iBAGlChB,I,gBC5CFkB,EAAQ,CACpB,iBACA,eACA,eACA,cACA,eACA,mBACA,iBACA,cACA,iBACA,mBACA,eACA,oBACA,cACA,iBACA,kBACA,gBACA,cACA,eCRYC,EAAYlB,YAAY,CACpCC,KAAM,OACNZ,aAR+B,CAC/B8B,KAAM,GACNC,KAAM,GACNC,WAAY,GAMZnB,SAAU,CACToB,aAAc,SAAAlB,GAOb,IANA,IAECe,EAAO,GACPI,EAAS,YAAIN,GAAOP,MAAK,iBAAM,GAAMc,KAAKC,YAC1CC,EAAS,YAAIT,GAAOP,MAAK,iBAAM,GAAMc,KAAKC,YAElCE,EANC,EAMQA,EAAI,EAAGA,IAAK,CAE7B,IADA,IAAMC,EAAW,GACRC,EAAIC,EAASD,EAAI,EAAGA,IAAK,CACjC,IAAME,EAAkB,CACvBC,KAAMT,EAAOU,OAAS,GACtBC,SAAU,CAAEC,KAAkB,GAAZR,EAXX,GAW0BG,KAAsB,GAAZ,EAAJD,EAVnC,IAWJO,YAAY,EACZ7C,MAAM,GAED8C,EAAkB,CACvBL,KAAMN,EAAOO,OAAS,GACtBC,SAAU,CAAEC,KAAkB,GAAZR,EAjBX,GAiB0BG,KAAsB,GAAZ,EAAJD,EAhBnC,GAgBuD,GAC3DO,YAAY,EACZ7C,MAAM,GAEPqC,EAASrB,KAAKwB,EAAOM,GAEtBlB,EAAKZ,KAAKqB,GAEXxB,EAAMe,KAAOA,GAGdmB,iBAAkB,SACjBlC,EACAE,GAEAF,EAAMe,KAAKb,EAAOG,QAAQ0B,KAAK7B,EAAOG,QAAQqB,KAAKM,YACjDhC,EAAMe,KAAKb,EAAOG,QAAQ0B,KAAK7B,EAAOG,QAAQqB,KAAKM,WACrDhC,EAAMgB,KAAKb,KAAKH,EAAMe,KAAKb,EAAOG,QAAQ0B,KAAK7B,EAAOG,QAAQqB,OAG/DS,UAAW,SAAAnC,GAAU,IAAD,gBACFA,EAAMgB,MADJ,IACnB,2BAA6B,CAAC,IAArBoB,EAAoB,QAC5BpC,EAAMe,KAAKqB,EAAKN,SAASC,KAAKK,EAAKN,SAASJ,KAAKvC,MAAO,GAFtC,8BAInBa,EAAMiB,aACNjB,EAAMgB,KAAO,IAGdqB,UAAW,SAAArC,GAAU,IAAD,gBACFA,EAAMgB,MADJ,IACnB,2BAA6B,CAAC,IAArBoB,EAAoB,QAC5BpC,EAAMe,KAAKqB,EAAKN,SAASC,KAAKK,EAAKN,SAASJ,KAAKM,YAAa,GAF5C,8BAInBhC,EAAMgB,KAAO,IAGdsB,gBAAiB,SAAAtC,GAChBA,EAAMiB,WAAa,GAGpBsB,aAAc,SAAAvC,GACbA,EAAMe,KAAKyB,SAAQ,SAAAT,GAClBA,EAAIS,SAAQ,SAAAC,GAAI,OAAKA,EAAKT,YAAcS,EAAKT,qBAM1C,EAOHlB,EAAUF,QANb0B,EADM,EACNA,gBACApB,EAFM,EAENA,aACAgB,EAHM,EAGNA,iBACAG,EAJM,EAINA,UACAF,EALM,EAKNA,UACAI,EANM,EAMNA,aAGczB,IChFF4B,EAAa9C,YAAY,CACrCC,KAAM,QACNZ,aAPgC,CAChC0D,UAAW,CAAEzD,SAAS,EAAO0D,MAAO,GACpCC,WAAY,CAAE3D,SAAS,EAAO0D,MAAO,IAMrC9C,SAAU,CACTgD,cAAe,SAAA9C,GACdA,EAAM2C,UAAUC,MAAQ5C,EAAM2C,UAAUC,MAAQ,GAEjDG,eAAgB,SAAA/C,GACfA,EAAM2C,UAAUzD,SAAU,GAE3B8D,cAAe,SAAAhD,GACdA,EAAM2C,UAAUzD,SAAU,EAC1Bc,EAAM2C,UAAUC,MAAQ,GAEzBK,eAAgB,SAAAjD,GACfA,EAAM6C,WAAWD,MAAQ5C,EAAM6C,WAAWD,MAAQ,GAEnDM,gBAAiB,SAAAlD,GAChBA,EAAM6C,WAAW3D,SAAU,GAE5BiE,eAAgB,SAAAnD,GACfA,EAAM6C,WAAW3D,SAAU,EAC3Bc,EAAM6C,WAAWD,MAAQ,MAKrB,EAOHF,EAAW9B,QANdoC,EADM,EACNA,cACAF,EAFM,EAENA,cACAC,EAHM,EAGNA,eACAG,EAJM,EAINA,gBACAC,EALM,EAKNA,eACAF,EANM,EAMNA,eAGcP,I,OCEAU,EAxCF,SAAC,GAAyB,IAAvBX,EAAsB,EAAtBA,KACTY,EAAWxE,IACXiC,EAAY/B,GAAe,SAAAiB,GAAK,OAAIA,EAAMe,QAC1C2B,EAAa3D,GAAe,SAAAiB,GAAK,OAAIA,EAAM4C,SAqBjD,OACC,mCACC,qBACCU,QAtBkB,WACU,IAA1BxC,EAAUE,KAAKuC,SAClBF,EAAShB,KACTgB,EAASL,OAIRlC,EAAUC,KAAK0B,EAAKX,SAASC,KAAKU,EAAKX,SAASJ,KAAKvC,MACtDuD,EAAWG,WAAW3D,UAEtBmE,EACCnB,EAAiB,CAChBH,IAAKU,EAAKX,SAASC,IACnBL,IAAKe,EAAKX,SAASJ,OAGrB2B,EAASN,OAORS,UAAS,eACRf,EAAKT,WAAa,iBAAmB,mBAD7B,YAELS,EAAKtD,MAAQ,uBAJlB,SAMC,mCACC,mBAAGqE,UAAS,UAAKf,EAAKb,eC2CZ6B,EAjEF,WACZ,IAAMJ,EAAWxE,IAEXiC,EAAY/B,GAAe,SAAAiB,GAAK,OAAIA,EAAMe,QAC1C2B,EAAa3D,GAAe,SAAAiB,GAAK,OAAIA,EAAM4C,SA8CjD,OA3CAc,qBAAU,WACTL,EAASnC,KAETyC,YAAW,WACVN,EAASd,KACTc,EAASH,OACP,OACD,CAACG,IAEJK,qBAAU,YAELhB,EAAWC,UAAUC,OAAS,GAAK9B,EAAUE,KAAKuC,OAAS,IAC9DI,YAAW,WACVN,EAAShB,KACTgB,EAASL,OACP,KAIHN,EAAWC,UAAUC,MAAQ,GACH,IAA1B9B,EAAUE,KAAKuC,QACfzC,EAAUE,KAAK,GAAGY,OAASd,EAAUE,KAAK,GAAGY,MAC7Cd,EAAUE,KAAK,GAAGc,WAAahB,EAAUE,KAAK,GAAGc,WAEjDuB,EAASlB,KACTkB,EAASL,MAImB,KAAzBlC,EAAUG,YAAqByB,EAAWG,WAAW3D,UACxDmE,EAASpD,EAAWyC,EAAWG,WAAWD,QAC1CS,EAASF,KACTE,EAASf,QAER,CACFe,EACAvC,EAAUG,WACVH,EAAUE,KACV0B,EAAWC,UAAUC,MACrBF,EAAWG,WAAW3D,QACtBwD,EAAWG,WAAWD,QAItB,qBAAKY,UAAU,YAAf,SACE1C,EAAUC,KAAK6C,KAAI,SAAC7B,EAAK8B,GAAN,OACnB,qBAAoBL,UAAU,MAA9B,SACEzB,EAAI6B,KAAI,SAACnB,EAAMqB,GAAP,OACR,qBAAqBN,UAAU,MAA/B,SACC,cAAC,EAAD,CAAMxB,WAAYS,EAAKT,WAAYS,KAAMA,KADhCqB,OAFFD,SC5CCE,EAtBG,WACjB,IAAMV,EAAWxE,IAEX6D,EAAa3D,GAAe,SAAAiB,GAAK,OAAIA,EAAM4C,SAWjD,OATAc,qBAAU,WACT,GAAIhB,EAAWC,UAAUzD,QAAS,CACjC,IAAM0D,EAAQoB,aAAY,WACzBX,EAASP,OACP,KACH,OAAO,kBAAMmB,cAAcrB,OAE1B,CAACS,EAAUX,EAAWC,UAAUzD,UAGlC,gCACC,0CACA,+BAAOwD,EAAWC,UAAUC,YCKhBsB,EAtBI,WAClB,IAAMb,EAAWxE,IAEX6D,EAAa3D,GAAe,SAAAiB,GAAK,OAAIA,EAAM4C,SAWjD,OATAc,qBAAU,WACT,GAAIhB,EAAWG,WAAW3D,QAAS,CAClC,IAAM0D,EAAQoB,aAAY,WACzBX,EAASJ,OACP,KACH,OAAO,kBAAMgB,cAAcrB,OAE1B,CAACS,EAAUX,EAAWG,WAAW3D,UAGnC,gCACC,+CACA,+BAAOwD,EAAWG,WAAWD,YCFjBuB,EAdG,WACjB,IAAMrD,EAAY/B,GAAe,SAAAiB,GAAK,OAAIA,EAAMe,QAChD,OACC,sBAAKyC,UAAU,YAAf,UACC,cAAC,EAAD,IACA,cAAC,EAAD,IACA,gCACC,0CACA,+BAAO1C,EAAUG,oBCsCNmD,EA/CK,WACnB,IAAMf,EAAWxE,IAEXc,EAAYZ,GAAe,SAAAiB,GAAK,OAAIA,EAAMqE,QAEhD,OACC,sBAAKb,UAAU,eAAf,UACC,uBACCA,UAAU,aACVc,KAAK,OACLzE,KAAK,SACL0E,MAAO5E,EAAUD,QAAU,GAC3B8E,SAAU,SAAAC,GACTpB,EAAS3C,EAAU+D,EAAEC,cAAcH,WAGrC,wBACCjB,QAAS,WACRD,EAAStD,MAEVyD,UAAU,sBAJX,wBAQC7D,EAAUP,YAAYmE,OAAS,GAC/B,sBAAKC,UAAU,aAAf,UACE7D,EAAUP,YAAYwE,KAAI,SAACe,EAAMC,GAAP,OAC1B,gCACEA,EAAQ,EADV,KACeD,EAAKjF,OADpB,KAC8BiF,EAAKvE,KADnC,QAAUwE,MAIVjF,EAAUP,YAAYmE,OAAS,GAC/B,wBACCD,QAAS,WACRD,EAAS1C,MAEV6C,UAAU,SAJX,sCClBSqB,MAZf,WACC,IAAMlF,EAAYZ,GAAe,SAAAiB,GAAK,OAAIA,EAAMqE,QAChD,OACC,qCACC,cAAC,EAAD,IACA,qBAAKb,UAAU,WAAf,SACE7D,EAAUT,QAAU,cAAC,EAAD,IAAW,cAAC,EAAD,UCPvB4F,EAAQC,YAAe,CACnCC,QAAS,CACRjE,KAAMD,EAAUkE,QAChBpC,MAAOF,EAAWsC,QAClBX,KAAM1E,EAAUqF,WCFlBC,IAASC,OACR,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACC,cAAC,IAAMK,WAAP,UACC,cAAC,EAAD,QAGFC,SAASC,eAAe,W","file":"static/js/main.86e71290.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { GameState } from '../types'\r\n\r\nconst initialState: GameState = {\r\n\tstarted: false,\r\n\tdone: false,\r\n\tleaderboard: JSON.parse(\r\n\t\tlocalStorage.getItem('leaderboard') || JSON.stringify([])\r\n\t),\r\n\tplayer: JSON.parse(\r\n\t\tlocalStorage.getItem('player') || JSON.stringify('Player')\r\n\t),\r\n}\r\n\r\nexport const gameSlice = createSlice({\r\n\tname: 'game',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tstartGame: state => {\r\n\t\t\tstate.started = true\r\n\t\t},\r\n\r\n\t\tfinishGame: (state, action: PayloadAction<number>) => {\r\n\t\t\tstate.started = false\r\n\t\t\tstate.leaderboard.push({ player: state.player, time: action.payload })\r\n\t\t\tstate.leaderboard.sort((a, b) => a.time - b.time)\r\n\t\t\tlocalStorage.setItem('leaderboard', JSON.stringify(state.leaderboard))\r\n\t\t},\r\n\r\n\t\tsetPlayer: (state, action: PayloadAction<string>) => {\r\n\t\t\tstate.player = action.payload\r\n\t\t\tlocalStorage.setItem('player', JSON.stringify(action.payload))\r\n\t\t},\r\n\r\n\t\tclearLeaderboard: state => {\r\n\t\t\tstate.leaderboard = []\r\n\t\t\tlocalStorage.setItem('leaderboard', JSON.stringify(state.leaderboard))\r\n\t\t},\r\n\t},\r\n})\r\n\r\nexport const { startGame, finishGame, setPlayer, clearLeaderboard } =\r\n\tgameSlice.actions\r\n\r\nexport default gameSlice\r\n","export const icons = [\r\n\t'fab fa-angular',\r\n\t'fab fa-apple',\r\n\t'fas fa-atlas',\r\n\t'fas fa-atom',\r\n\t'fas fa-bahai',\r\n\t'fas fa-biohazard',\r\n\t'fab fa-bitcoin',\r\n\t'fas fa-bomb',\r\n\t'fas fa-blender',\r\n\t'fab fa-bluetooth',\r\n\t'fas fa-brain',\r\n\t'fas fa-chess-rook',\r\n\t'fas fa-cogs',\r\n\t'fas fa-compass',\r\n\t'fab fa-css3-alt',\r\n\t'fab fa-docker',\r\n\t'fas fa-dove',\r\n\t'fas fa-fish',\r\n]\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { icons } from '../icons'\r\nimport { CartType, GridState } from '../types'\r\n\r\nconst initialState: GridState = {\r\n\tgrid: [],\r\n\tpair: [],\r\n\tfoundPairs: 0,\r\n}\r\n\r\nexport const gridSlice = createSlice({\r\n\tname: 'grid',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tpopulateGrid: state => {\r\n\t\t\tlet row = 6,\r\n\t\t\t\tcol = 6,\r\n\t\t\t\tgrid = [],\r\n\t\t\t\ticons1 = [...icons].sort(() => 0.5 - Math.random()),\r\n\t\t\t\ticons2 = [...icons].sort(() => 0.5 - Math.random())\r\n\r\n\t\t\tfor (let r = row; r > 0; r--) {\r\n\t\t\t\tconst rowArray = []\r\n\t\t\t\tfor (let c = col / 2; c > 0; c--) {\r\n\t\t\t\t\tconst card1: CartType = {\r\n\t\t\t\t\t\ticon: icons1.pop() || '',\r\n\t\t\t\t\t\tposition: { row: (r - row) * -1, col: (c * 2 - col) * -1 },\r\n\t\t\t\t\t\tvisibility: true,\r\n\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst card2: CartType = {\r\n\t\t\t\t\t\ticon: icons2.pop() || '',\r\n\t\t\t\t\t\tposition: { row: (r - row) * -1, col: (c * 2 - col) * -1 + 1 },\r\n\t\t\t\t\t\tvisibility: true,\r\n\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t}\r\n\t\t\t\t\trowArray.push(card1, card2)\r\n\t\t\t\t}\r\n\t\t\t\tgrid.push(rowArray)\r\n\t\t\t}\r\n\t\t\tstate.grid = grid\r\n\t\t},\r\n\r\n\t\ttoggleVisibility: (\r\n\t\t\tstate,\r\n\t\t\taction: PayloadAction<{ row: number; col: number }>\r\n\t\t) => {\r\n\t\t\tstate.grid[action.payload.row][action.payload.col].visibility =\r\n\t\t\t\t!state.grid[action.payload.row][action.payload.col].visibility\r\n\t\t\tstate.pair.push(state.grid[action.payload.row][action.payload.col])\r\n\t\t},\r\n\r\n\t\tclosePair: state => {\r\n\t\t\tfor (let cart of state.pair) {\r\n\t\t\t\tstate.grid[cart.position.row][cart.position.col].done = true\r\n\t\t\t}\r\n\t\t\tstate.foundPairs++\r\n\t\t\tstate.pair = []\r\n\t\t},\r\n\r\n\t\tclearPair: state => {\r\n\t\t\tfor (let cart of state.pair) {\r\n\t\t\t\tstate.grid[cart.position.row][cart.position.col].visibility = false\r\n\t\t\t}\r\n\t\t\tstate.pair = []\r\n\t\t},\r\n\r\n\t\tclearFoundPairs: state => {\r\n\t\t\tstate.foundPairs = 0\r\n\t\t},\r\n\r\n\t\tturnAllCards: state => {\r\n\t\t\tstate.grid.forEach(row => {\r\n\t\t\t\trow.forEach(card => (card.visibility = !card.visibility))\r\n\t\t\t})\r\n\t\t},\r\n\t},\r\n})\r\n\r\nexport const {\r\n\tclearFoundPairs,\r\n\tpopulateGrid,\r\n\ttoggleVisibility,\r\n\tclearPair,\r\n\tclosePair,\r\n\tturnAllCards,\r\n} = gridSlice.actions\r\n\r\nexport default gridSlice\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport { TimerState } from '../types'\r\n\r\nconst initialState: TimerState = {\r\n\tpairTimer: { started: false, timer: 0 },\r\n\ttotalTimer: { started: false, timer: 0 },\r\n}\r\n\r\nexport const timerSlice = createSlice({\r\n\tname: 'timer',\r\n\tinitialState,\r\n\treducers: {\r\n\t\tpairTimerTick: state => {\r\n\t\t\tstate.pairTimer.timer = state.pairTimer.timer + 1\r\n\t\t},\r\n\t\tpairTimerStart: state => {\r\n\t\t\tstate.pairTimer.started = true\r\n\t\t},\r\n\t\tpairTimerStop: state => {\r\n\t\t\tstate.pairTimer.started = false\r\n\t\t\tstate.pairTimer.timer = 0\r\n\t\t},\r\n\t\ttotalTimerTick: state => {\r\n\t\t\tstate.totalTimer.timer = state.totalTimer.timer + 1\r\n\t\t},\r\n\t\ttotalTimerStart: state => {\r\n\t\t\tstate.totalTimer.started = true\r\n\t\t},\r\n\t\ttotalTimerStop: state => {\r\n\t\t\tstate.totalTimer.started = false\r\n\t\t\tstate.totalTimer.timer = 0\r\n\t\t},\r\n\t},\r\n})\r\n\r\nexport const {\r\n\tpairTimerStop,\r\n\tpairTimerTick,\r\n\tpairTimerStart,\r\n\ttotalTimerStart,\r\n\ttotalTimerStop,\r\n\ttotalTimerTick,\r\n} = timerSlice.actions\r\n\r\nexport default timerSlice\r\n","import React from 'react'\r\nimport { useAppDispatch, useAppSelector } from '../hooks'\r\nimport { clearPair, toggleVisibility } from '../slices/gridSlice'\r\nimport { pairTimerStart, pairTimerStop } from '../slices/timerSlice'\r\nimport { CardProps } from '../types'\r\n\r\nconst Card = ({ card }: CardProps) => {\r\n\tconst dispatch = useAppDispatch()\r\n\tconst gridSlice = useAppSelector(state => state.grid)\r\n\tconst timerSlice = useAppSelector(state => state.timer)\r\n\r\n\tconst clickHandler = () => {\r\n\t\tif (gridSlice.pair.length === 2) {\r\n\t\t\tdispatch(clearPair())\r\n\t\t\tdispatch(pairTimerStop())\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\t!gridSlice.grid[card.position.row][card.position.col].done &&\r\n\t\t\ttimerSlice.totalTimer.started\r\n\t\t) {\r\n\t\t\tdispatch(\r\n\t\t\t\ttoggleVisibility({\r\n\t\t\t\t\trow: card.position.row,\r\n\t\t\t\t\tcol: card.position.col,\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\tdispatch(pairTimerStart())\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div\r\n\t\t\t\tonClick={clickHandler}\r\n\t\t\t\tclassName={`card ${\r\n\t\t\t\t\tcard.visibility ? 'flip-card-face' : 'flip-card-bottom'\r\n\t\t\t\t} ${card.done && 'card-hide card-done'}`}\r\n\t\t\t>\r\n\t\t\t\t<>\r\n\t\t\t\t\t<i className={`${card.icon}`}></i>\r\n\t\t\t\t</>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Card\r\n","import React, { useEffect } from 'react'\r\nimport { useAppDispatch, useAppSelector } from '../hooks'\r\nimport { finishGame } from '../slices/gameSlice'\r\nimport {\r\n\tclearFoundPairs,\r\n\tclearPair,\r\n\tclosePair,\r\n\tpopulateGrid,\r\n\tturnAllCards,\r\n} from '../slices/gridSlice'\r\nimport {\r\n\tpairTimerStop,\r\n\ttotalTimerStart,\r\n\ttotalTimerStop,\r\n} from '../slices/timerSlice'\r\nimport Card from './Card'\r\n\r\nconst Game = () => {\r\n\tconst dispatch = useAppDispatch()\r\n\r\n\tconst gridSlice = useAppSelector(state => state.grid)\r\n\tconst timerSlice = useAppSelector(state => state.timer)\r\n\r\n\t// Starts game\r\n\tuseEffect(() => {\r\n\t\tdispatch(populateGrid())\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tdispatch(turnAllCards())\r\n\t\t\tdispatch(totalTimerStart())\r\n\t\t}, 5000)\r\n\t}, [dispatch])\r\n\r\n\tuseEffect(() => {\r\n\t\t//If fail to find pair\r\n\t\tif (timerSlice.pairTimer.timer >= 5 || gridSlice.pair.length > 2) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tdispatch(clearPair())\r\n\t\t\t\tdispatch(pairTimerStop())\r\n\t\t\t}, 500)\r\n\t\t}\r\n\t\t//If found pair\r\n\t\tif (\r\n\t\t\ttimerSlice.pairTimer.timer < 5 &&\r\n\t\t\tgridSlice.pair.length === 2 &&\r\n\t\t\tgridSlice.pair[0].icon === gridSlice.pair[1].icon &&\r\n\t\t\tgridSlice.pair[0].position !== gridSlice.pair[1].position\r\n\t\t) {\r\n\t\t\tdispatch(closePair())\r\n\t\t\tdispatch(pairTimerStop())\r\n\t\t}\r\n\r\n\t\t//If game over\r\n\t\tif (gridSlice.foundPairs === 18 && timerSlice.totalTimer.started) {\r\n\t\t\tdispatch(finishGame(timerSlice.totalTimer.timer))\r\n\t\t\tdispatch(totalTimerStop())\r\n\t\t\tdispatch(clearFoundPairs())\r\n\t\t}\r\n\t}, [\r\n\t\tdispatch,\r\n\t\tgridSlice.foundPairs,\r\n\t\tgridSlice.pair,\r\n\t\ttimerSlice.pairTimer.timer,\r\n\t\ttimerSlice.totalTimer.started,\r\n\t\ttimerSlice.totalTimer.timer,\r\n\t])\r\n\r\n\treturn (\r\n\t\t<div className='container'>\r\n\t\t\t{gridSlice.grid.map((row, rowIndex) => (\r\n\t\t\t\t<div key={rowIndex} className='row'>\r\n\t\t\t\t\t{row.map((card, cardIndex) => (\r\n\t\t\t\t\t\t<div key={cardIndex} className='col'>\r\n\t\t\t\t\t\t\t<Card visibility={card.visibility} card={card} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Game\r\n","import React, { useEffect } from 'react'\r\nimport { useAppDispatch, useAppSelector } from '../hooks'\r\nimport { pairTimerTick } from '../slices/timerSlice'\r\n\r\nconst PairTimer = () => {\r\n\tconst dispatch = useAppDispatch()\r\n\r\n\tconst timerSlice = useAppSelector(state => state.timer)\r\n\r\n\tuseEffect(() => {\r\n\t\tif (timerSlice.pairTimer.started) {\r\n\t\t\tconst timer = setInterval(() => {\r\n\t\t\t\tdispatch(pairTimerTick())\r\n\t\t\t}, 1000)\r\n\t\t\treturn () => clearInterval(timer)\r\n\t\t}\r\n\t}, [dispatch, timerSlice.pairTimer.started])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<span>Timer:</span>\r\n\t\t\t<span>{timerSlice.pairTimer.timer}</span>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default PairTimer\r\n","import React, { useEffect } from 'react'\r\nimport { useAppDispatch, useAppSelector } from '../hooks'\r\nimport { totalTimerTick } from '../slices/timerSlice'\r\n\r\nconst TotalTimer = () => {\r\n\tconst dispatch = useAppDispatch()\r\n\r\n\tconst timerSlice = useAppSelector(state => state.timer)\r\n\r\n\tuseEffect(() => {\r\n\t\tif (timerSlice.totalTimer.started) {\r\n\t\t\tconst timer = setInterval(() => {\r\n\t\t\t\tdispatch(totalTimerTick())\r\n\t\t\t}, 1000)\r\n\t\t\treturn () => clearInterval(timer)\r\n\t\t}\r\n\t}, [dispatch, timerSlice.totalTimer.started])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<span>Total time:</span>\r\n\t\t\t<span>{timerSlice.totalTimer.timer}</span>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TotalTimer\r\n","import React from 'react'\r\nimport { useAppSelector } from '../hooks'\r\nimport PairTimer from './PairTimer'\r\nimport TotalTimer from './TotalTimer'\r\n\r\nconst Interface = () => {\r\n\tconst gridSlice = useAppSelector(state => state.grid)\r\n\treturn (\r\n\t\t<div className='interface'>\r\n\t\t\t<TotalTimer />\r\n\t\t\t<PairTimer />\r\n\t\t\t<div>\r\n\t\t\t\t<span>Pairs:</span>\r\n\t\t\t\t<span>{gridSlice.foundPairs}</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Interface\r\n","import React from 'react'\r\nimport { useAppDispatch, useAppSelector } from '../hooks'\r\nimport { clearLeaderboard, setPlayer, startGame } from '../slices/gameSlice'\r\n\r\nconst StartScreen = () => {\r\n\tconst dispatch = useAppDispatch()\r\n\r\n\tconst gameSlice = useAppSelector(state => state.game)\r\n\r\n\treturn (\r\n\t\t<div className='start-screen'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='input-text'\r\n\t\t\t\ttype='text'\r\n\t\t\t\tname='player'\r\n\t\t\t\tvalue={gameSlice.player || ''}\r\n\t\t\t\tonChange={e => {\r\n\t\t\t\t\tdispatch(setPlayer(e.currentTarget.value))\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t\t<button\r\n\t\t\t\tonClick={() => {\r\n\t\t\t\t\tdispatch(startGame())\r\n\t\t\t\t}}\r\n\t\t\t\tclassName='button start-button'\r\n\t\t\t>\r\n\t\t\t\tStart game\r\n\t\t\t</button>\r\n\t\t\t{gameSlice.leaderboard.length > 0 && (\r\n\t\t\t\t<div className='leaderbord'>\r\n\t\t\t\t\t{gameSlice.leaderboard.map((item, index) => (\r\n\t\t\t\t\t\t<div key={index}>\r\n\t\t\t\t\t\t\t{index + 1}. {item.player}: {item.time}sec\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t{gameSlice.leaderboard.length > 0 && (\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\tdispatch(clearLeaderboard())\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\tclassName='button'\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tClear Leaderboard\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default StartScreen\r\n","import React from 'react'\nimport Game from './components/Game'\nimport Interface from './components/Interface'\nimport StartScreen from './components/StartScreen'\nimport { useAppSelector } from './hooks'\n\nfunction App() {\n\tconst gameSlice = useAppSelector(state => state.game)\n\treturn (\n\t\t<>\n\t\t\t<Interface />\n\t\t\t<div className='game-box'>\n\t\t\t\t{gameSlice.started ? <Game /> : <StartScreen />}\n\t\t\t</div>\n\t\t</>\n\t)\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport gameSlice from './slices/gameSlice'\r\nimport gridSlice from './slices/gridSlice'\r\nimport timerSlice from './slices/timerSlice'\r\n\r\nexport const store = configureStore({\r\n\treducer: {\r\n\t\tgrid: gridSlice.reducer,\r\n\t\ttimer: timerSlice.reducer,\r\n\t\tgame: gameSlice.reducer,\r\n\t},\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>\n\t</Provider>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}